
PWM-testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00802800  000001ac  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00802812  00802812  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a8  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002493  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000386  00000000  00000000  00005b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00005ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017b4  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00007704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00007774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_8>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  94:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  98:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	ec ea       	ldi	r30, 0xAC	; 172
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	28 e2       	ldi	r18, 0x28	; 40
  c4:	a2 e1       	ldi	r26, 0x12	; 18
  c6:	b8 e2       	ldi	r27, 0x28	; 40
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a4 31       	cpi	r26, 0x14	; 20
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 6f 00 	call	0xde	; 0xde <main>
  d6:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <main>:
					
	TCA0.SPLIT.CTRLB =  1 << TCA_SPLIT_HCMP0EN_bp    /* High Compare 0 Enable: enabled */
						| 1 << TCA_SPLIT_LCMP0EN_bp;  /* Low Compare 0 Enable: enabled */
	
						
	TCA0.SPLIT.CTRLD = 1 << TCA_SPLIT_SPLITM_bp; /* Split Mode : enabled */
  de:	88 ed       	ldi	r24, 0xD8	; 216
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	84 bf       	out	0x34, r24	; 52
  e4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
  e8:	90 e8       	ldi	r25, 0x80	; 128
  ea:	84 bf       	out	0x34, r24	; 52
  ec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
  f0:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
  fa:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7005e4>
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7005e4>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
 10a:	91 e1       	ldi	r25, 0x11	; 17
 10c:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
 110:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x700460>
 11a:	8f e7       	ldi	r24, 0x7F	; 127
 11c:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
 120:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
 12a:	78 94       	sei
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x4e>

0000012e <__vector_8>:
}


ISR(TCA0_HUNF_vect){
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	TCA0_SPLIT_INTFLAGS = (1<<OVF) | (1<<1); //clearing the interrupt flag.  For some reason this messes up the PWM output more. 
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
	
	static int num;

	TCA0.SPLIT.LCMP0 = lookUp2[num]; /* Checks table for next duty cycle value */
 148:	80 91 12 28 	lds	r24, 0x2812	; 0x802812 <__data_end>
 14c:	90 91 13 28 	lds	r25, 0x2813	; 0x802813 <__data_end+0x1>
 150:	fc 01       	movw	r30, r24
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	f8 4d       	sbci	r31, 0xD8	; 216
 15a:	20 81       	ld	r18, Z
 15c:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
	TCA0.SPLIT.HCMP0 = lookUp2[num+3]; /* Checks table for next duty cycle value */
 160:	fc 01       	movw	r30, r24
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	ea 5f       	subi	r30, 0xFA	; 250
 168:	f7 4d       	sbci	r31, 0xD7	; 215
 16a:	20 81       	ld	r18, Z
 16c:	20 93 29 0a 	sts	0x0A29, r18	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
	TCA0.SPLIT.LCNT = 127;  //Since split mode uses downcount, the counter value is reset to it's max value.
 170:	2f e7       	ldi	r18, 0x7F	; 127
 172:	20 93 20 0a 	sts	0x0A20, r18	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
	TCA0.SPLIT.HCNT = 127;  //Since split mode uses downcount, the counter value is reset to it's max value.
 176:	20 93 21 0a 	sts	0x0A21, r18	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	
	if(++num >= 6){ // Pre-increment num then check it's below 10.
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	86 30       	cpi	r24, 0x06	; 6
 17e:	91 05       	cpc	r25, r1
 180:	74 f0       	brlt	.+28     	; 0x19e <__vector_8+0x70>
		num = 0;       // Reset num.
 182:	10 92 12 28 	sts	0x2812, r1	; 0x802812 <__data_end>
 186:	10 92 13 28 	sts	0x2813, r1	; 0x802813 <__data_end+0x1>
	}
	
	
	//TCA0.SPLIT.INTFLAGS = (1<<1) | (1<<0); 
	
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti
	TCA0.SPLIT.LCMP0 = lookUp2[num]; /* Checks table for next duty cycle value */
	TCA0.SPLIT.HCMP0 = lookUp2[num+3]; /* Checks table for next duty cycle value */
	TCA0.SPLIT.LCNT = 127;  //Since split mode uses downcount, the counter value is reset to it's max value.
	TCA0.SPLIT.HCNT = 127;  //Since split mode uses downcount, the counter value is reset to it's max value.
	
	if(++num >= 6){ // Pre-increment num then check it's below 10.
 19e:	80 93 12 28 	sts	0x2812, r24	; 0x802812 <__data_end>
 1a2:	90 93 13 28 	sts	0x2813, r25	; 0x802813 <__data_end+0x1>
 1a6:	f1 cf       	rjmp	.-30     	; 0x18a <__vector_8+0x5c>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
