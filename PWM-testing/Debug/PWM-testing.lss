
PWM-testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00802800  00000228  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080280a  0080280a  000002c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003404  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002491  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  00005c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00005fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017db  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  0000787b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000795b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_7>
  20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_8>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  94:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  98:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	e8 e2       	ldi	r30, 0x28	; 40
  b4:	f2 e0       	ldi	r31, 0x02	; 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	28 e2       	ldi	r18, 0x28	; 40
  c4:	aa e0       	ldi	r26, 0x0A	; 10
  c6:	b8 e2       	ldi	r27, 0x28	; 40
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ac 30       	cpi	r26, 0x0C	; 12
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 6f 00 	call	0xde	; 0xde <main>
  d6:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <main>:
					
	TCA0.SPLIT.CTRLB =  1 << TCA_SPLIT_HCMP0EN_bp    /* High Compare 0 Enable: enabled */
						| 1 << TCA_SPLIT_LCMP0EN_bp;  /* Low Compare 0 Enable: enabled */
	
						
	TCA0.SPLIT.CTRLD = 1 << TCA_SPLIT_SPLITM_bp; /* Split Mode : enabled */
  de:	88 ed       	ldi	r24, 0xD8	; 216
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	84 bf       	out	0x34, r24	; 52
  e4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
  e8:	90 e8       	ldi	r25, 0x80	; 128
  ea:	84 bf       	out	0x34, r24	; 52
  ec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
  f0:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
  fa:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7005e4>
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7005e4>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
 10a:	91 e1       	ldi	r25, 0x11	; 17
 10c:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
 110:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x700460>
 11a:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <MaxVerdi>
 11e:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <MaxVerdi+0x1>
 122:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
 126:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
 12a:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
 134:	78 94       	sei
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x58>

00000138 <__vector_8>:
}


ISR(TCA0_HUNF_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	//static int num;

	//TCA0.SPLIT.LCMP0 = lookUpTest[num]; /* Checks table for next duty cycle value */
	TCA0.SPLIT.HCMP0 = lookUpTest[num]; /* Checks table for next duty cycle value */
 14c:	e0 91 0a 28 	lds	r30, 0x280A	; 0x80280a <__data_end>
 150:	f0 91 0b 28 	lds	r31, 0x280B	; 0x80280b <__data_end+0x1>
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	f8 4d       	sbci	r31, 0xD8	; 216
 15c:	80 81       	ld	r24, Z
 15e:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
	//TCA0.SPLIT.LCNT = 61;  //Since split mode uses downcount, the counter value is reset to it's max value.
	TCA0.SPLIT.HCNT = 67;  //Since split mode uses downcount, the counter value is reset to it's max value.
 162:	23 e4       	ldi	r18, 0x43	; 67
 164:	20 93 21 0a 	sts	0x0A21, r18	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	//
	
	if(++num == 3){ // Pre-increment num then check it's below 10.
 168:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <__data_end>
 16c:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <__data_end+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <__data_end>
 176:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <__data_end+0x1>
 17a:	03 97       	sbiw	r24, 0x03	; 3
 17c:	59 f4       	brne	.+22     	; 0x194 <__vector_8+0x5c>
		num = 0;       // Reset num.
 17e:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <__data_end>
 182:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <__data_end+0x1>
		TCA0.SPLIT.INTCTRL = (0<<HUNF) | (1<<LUNF); 
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
		TCA0.SPLIT.HCMP0 = 0;
 18c:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
		TCA0.SPLIT.LCNT = 67;
 190:	20 93 20 0a 	sts	0x0A20, r18	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
	}
	
	TCA0_SPLIT_INTFLAGS = (1<<HUNF); //clearing the interrupt flag.  For some reason this messes up the PWM output more. 
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
	
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <__vector_7>:

ISR(TCA0_LUNF_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	//static int num;

	TCA0.SPLIT.LCMP0 = lookUpTest[num]; /* Checks table for next duty cycle value */
 1c2:	e0 91 0a 28 	lds	r30, 0x280A	; 0x80280a <__data_end>
 1c6:	f0 91 0b 28 	lds	r31, 0x280B	; 0x80280b <__data_end+0x1>
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	e0 50       	subi	r30, 0x00	; 0
 1d0:	f8 4d       	sbci	r31, 0xD8	; 216
 1d2:	80 81       	ld	r24, Z
 1d4:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
	//TCA0.SPLIT.HCMP0 = lookUpTest[num+3]; /* Checks table for next duty cycle value */
	TCA0.SPLIT.LCNT = 67;  //Since split mode uses downcount, the counter value is reset to it's max value.
 1d8:	23 e4       	ldi	r18, 0x43	; 67
 1da:	20 93 20 0a 	sts	0x0A20, r18	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
	//TCA0.SPLIT.HCNT = TCA0.SPLIT.LCNT;  //Since split mode uses downcount, the counter value is reset to it's max value.
	//
	
	if(++num == 3){ // Pre-increment num then check it's below 10.
 1de:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <__data_end>
 1e2:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <__data_end+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <__data_end>
 1ec:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <__data_end+0x1>
 1f0:	03 97       	sbiw	r24, 0x03	; 3
 1f2:	59 f4       	brne	.+22     	; 0x20a <__vector_7+0x5c>
		num = 0;       // Reset num.
 1f4:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <__data_end>
 1f8:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <__data_end+0x1>
		TCA0.SPLIT.INTCTRL = (1<<HUNF) | (0<<LUNF); 
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
		TCA0.SPLIT.LCMP0 = 0;
 202:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
		TCA0.SPLIT.HCNT = 67;
 206:	20 93 21 0a 	sts	0x0A21, r18	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	}
	
	TCA0_SPLIT_INTFLAGS = (1<<LUNF); //clearing the interrupt flag.  For some reason this messes up the PWM output more. 
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
	
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
