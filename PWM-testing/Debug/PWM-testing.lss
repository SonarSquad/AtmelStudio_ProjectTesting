
PWM-testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003344  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002438  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030e  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00005cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001850  00000000  00000000  00005d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000755c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  b0:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <PWM_Init>:
    }
}

void PWM_Init(void){
	
	PORTD_DIR = 0XFF; //Set PORTD as output.
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x700460>
	
	
	TCA0.SINGLE.CMP0 = 25;  //Dette definerer duty cycle ut på PD0
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	89 e1       	ldi	r24, 0x19	; 25
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	80 a7       	std	Z+40, r24	; 0x28
  c8:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.PER = 50;  //Dette definerer PWM-periodetiden.
  ca:	82 e3       	ldi	r24, 0x32	; 50
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	86 a3       	std	Z+38, r24	; 0x26
  d0:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP1 = 5;  //Dette definerer duty cycle ut på PD0
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	82 a7       	std	Z+42, r24	; 0x2a
  d8:	93 a7       	std	Z+43, r25	; 0x2b
  da:	08 95       	ret

000000dc <ClkSelect>:
	
	
}

void ClkSelect(void){
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, 0); //Forces 20MHz CPU clock frequency
  dc:	88 ed       	ldi	r24, 0xD8	; 216
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	84 bf       	out	0x34, r24	; 52
  e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, (1<<7)); //Sender klokke-signal ut på PA7-pin
  e6:	90 e8       	ldi	r25, 0x80	; 128
  e8:	84 bf       	out	0x34, r24	; 52
  ea:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	PORTA_DIR |= (1<<7); //PA7 as output for clock frequency check
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f4 e0       	ldi	r31, 0x04	; 4
  f2:	80 81       	ld	r24, Z
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <Timer0_Init>:
	
}

void Timer0_Init(void){
	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm); //Enables PORTMUXD to achieve Waveform Output on the PWM Pins
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	84 81       	ldd	r24, Z+4	; 0x04
 100:	83 60       	ori	r24, 0x03	; 3
 102:	84 83       	std	Z+4, r24	; 0x04
	
	
	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	fa e0       	ldi	r31, 0x0A	; 10
 108:	83 e7       	ldi	r24, 0x73	; 115
 10a:	81 83       	std	Z+1, r24	; 0x01
	                    | 1 << TCA_SINGLE_CMP0EN_bp         /* Setting: enabled */
	                    | 1 << TCA_SINGLE_CMP1EN_bp         /* Setting: enabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Setting: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */
						
	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Setting: enabled */
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	82 83       	std	Z+2, r24	; 0x02
						| 1 << TCA_SINGLE_CMP1OV_bp  /* Setting: enabled */
						| 0 << TCA_SINGLE_CMP2OV_bp; /* Setting: disabled */
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc    /* System Clock */
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp; /* Module Enable: enabled */
						
						TCA0.SINGLE.PERBUF = 50;
 114:	82 e3       	ldi	r24, 0x32	; 50
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	86 ab       	std	Z+54, r24	; 0x36
 11a:	97 ab       	std	Z+55, r25	; 0x37
 11c:	08 95       	ret

0000011e <main>:



int main(void)
{
	ClkSelect();
 11e:	0e 94 6e 00 	call	0xdc	; 0xdc <ClkSelect>
	Timer0_Init();
 122:	0e 94 7d 00 	call	0xfa	; 0xfa <Timer0_Init>
	PWM_Init();   
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <PWM_Init>
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0xc>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
