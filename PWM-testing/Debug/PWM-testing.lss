
PWM-testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003375  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002463  00000000  00000000  00003621  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035c  00000000  00000000  00005a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00005de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001864  00000000  00000000  00005e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000076bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00007705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_7>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  84:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  88:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  8c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  90:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  94:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  98:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  9c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	28 e2       	ldi	r18, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a0 30       	cpi	r26, 0x00	; 0
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 90 00 	call	0x120	; 0x120 <main>
  c0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <PWM_Init>:
    }
}

void PWM_Init(void){
	
	PORTD_DIR = 0XFF; //Set PORTD as output.
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x700460>

	
	
	TCA0.SINGLE.PER = 50;  //Dette definerer PWM-periodetiden.
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	fa e0       	ldi	r31, 0x0A	; 10
  d2:	82 e3       	ldi	r24, 0x32	; 50
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	86 a3       	std	Z+38, r24	; 0x26
  d8:	97 a3       	std	Z+39, r25	; 0x27
	//TCA0.SINGLE.CMP1 = 5;  //Dette definerer duty cycle ut på PD0
	
	TCA0.SINGLE.INTCTRL = (1<<OVF);  //Enables overflow interrupt in Timer 0
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	82 87       	std	Z+10, r24	; 0x0a
  de:	08 95       	ret

000000e0 <ClkSelect>:
	
	
}

void ClkSelect(void){
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, 0); //Forces 20MHz CPU clock frequency
  e0:	88 ed       	ldi	r24, 0xD8	; 216
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	84 bf       	out	0x34, r24	; 52
  e6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, (1<<7)); //Sender klokke-signal ut på PA7-pin
  ea:	90 e8       	ldi	r25, 0x80	; 128
  ec:	84 bf       	out	0x34, r24	; 52
  ee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	
	PORTF_DIR = PIN5_bm;  //Just for LED testing
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7004a0>
	PORTA_DIR |= PIN7_bm; //PA7 as output for clock frequency check
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f4 e0       	ldi	r31, 0x04	; 4
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <Timer0_Init>:
	
}

void Timer0_Init(void){
	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm); //Enables PORTMUXD to achieve Waveform Output on the PWM Pins
 104:	e0 ee       	ldi	r30, 0xE0	; 224
 106:	f5 e0       	ldi	r31, 0x05	; 5
 108:	84 81       	ldd	r24, Z+4	; 0x04
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	84 83       	std	Z+4, r24	; 0x04
	
	
	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 10e:	e0 e0       	ldi	r30, 0x00	; 0
 110:	fa e0       	ldi	r31, 0x0A	; 10
 112:	83 e7       	ldi	r24, 0x73	; 115
 114:	81 83       	std	Z+1, r24	; 0x01
	                    | 1 << TCA_SINGLE_CMP0EN_bp         /* Setting: enabled */
	                    | 1 << TCA_SINGLE_CMP1EN_bp         /* Setting: enabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Setting: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */
						
	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Setting: enabled */
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	82 83       	std	Z+2, r24	; 0x02
						| 1 << TCA_SINGLE_CMP1OV_bp  /* Setting: enabled */
						| 0 << TCA_SINGLE_CMP2OV_bp; /* Setting: disabled */
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc    /* System Clock */
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <main>:



int main(void)
{
	sei();  //Global interrupts enabled
 120:	78 94       	sei
	ClkSelect();
 122:	0e 94 70 00 	call	0xe0	; 0xe0 <ClkSelect>
	Timer0_Init();
 126:	0e 94 82 00 	call	0x104	; 0x104 <Timer0_Init>
	TCA0.SINGLE.CMP0 = 10;  //Dette definerer duty cycle ut på PD0
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 132:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
	PWM_Init();   
 136:	0e 94 64 00 	call	0xc8	; 0xc8 <PWM_Init>
 13a:	ff cf       	rjmp	.-2      	; 0x13a <main+0x1a>

0000013c <__vector_7>:
						//TCA0.SINGLE.PERBUF = 50;

}


ISR(TCA0_OVF_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	
	
	if (TCA0.SINGLE.CMP0 == 10) {  //Dette definerer duty cycle ut på PD0
 14a:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 14e:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
 152:	0a 97       	sbiw	r24, 0x0a	; 10
 154:	19 f4       	brne	.+6      	; 0x15c <__vector_7+0x20>
		
		TCA0.SINGLE.CMP0 = 20;
 156:	84 e1       	ldi	r24, 0x14	; 20
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	14 c0       	rjmp	.+40     	; 0x184 <__vector_7+0x48>
		TCA0.SINGLE.CNT = 0;
		
	
	}
	
	else if (TCA0.SINGLE.CMP0 == 20){
 15c:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 160:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
 164:	44 97       	sbiw	r24, 0x14	; 20
 166:	19 f4       	brne	.+6      	; 0x16e <__vector_7+0x32>
	
		TCA0.SINGLE.CMP0 = 30;
 168:	8e e1       	ldi	r24, 0x1E	; 30
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0b c0       	rjmp	.+22     	; 0x184 <__vector_7+0x48>
		TCA0.SINGLE.CNT = 0;
		
	}
	
	else if (TCA0.SINGLE.CMP0 == 30){
 16e:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 172:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
 176:	4e 97       	sbiw	r24, 0x1e	; 30
 178:	19 f4       	brne	.+6      	; 0x180 <__vector_7+0x44>
	
		TCA0.SINGLE.CMP0 = 5;
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__vector_7+0x48>
		TCA0.SINGLE.CNT = 0;
		
	}
	
	else  {
		TCA0.SINGLE.CMP0 = 10;
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 188:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
		TCA0.SINGLE.CNT = 0;
 18c:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
 190:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
		
	//IntCount++;
	
	//asm (nop);
	
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
