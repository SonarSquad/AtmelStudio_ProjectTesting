
PWM-testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00802800  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080280c  0080280c  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033d1  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002493  00000000  00000000  000036d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000375  00000000  00000000  00005b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00005edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000186c  00000000  00000000  00005f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  000077d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00007851  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_7>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  94:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  98:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	ee ea       	ldi	r30, 0xAE	; 174
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	28 e2       	ldi	r18, 0x28	; 40
  c4:	ac e0       	ldi	r26, 0x0C	; 12
  c6:	b8 e2       	ldi	r27, 0x28	; 40
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ae 30       	cpi	r26, 0x0E	; 14
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 6f 00 	call	0xde	; 0xde <main>
  d6:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <main>:
						
	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Setting: enabled */
						| 1 << TCA_SINGLE_CMP1OV_bp  /* Setting: enabled */
						| 0 << TCA_SINGLE_CMP2OV_bp; /* Setting: disabled */
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc    /* System Clock */
  de:	78 94       	sei
  e0:	88 ed       	ldi	r24, 0xD8	; 216
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	84 bf       	out	0x34, r24	; 52
  e6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
  ea:	90 e8       	ldi	r25, 0x80	; 128
  ec:	84 bf       	out	0x34, r24	; 52
  ee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
  f2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
  fc:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7005e4>
 100:	83 60       	ori	r24, 0x03	; 3
 102:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7005e4>
 106:	83 e7       	ldi	r24, 0x73	; 115
 108:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <__TEXT_REGION_LENGTH__+0x700a02>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
 118:	23 e4       	ldi	r18, 0x43	; 67
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 120:	30 93 29 0a 	sts	0x0A29, r19	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <__TEXT_REGION_LENGTH__+0x700460>
 12a:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__TEXT_REGION_LENGTH__+0x700a26>
 12e:	30 93 27 0a 	sts	0x0A27, r19	; 0x800a27 <__TEXT_REGION_LENGTH__+0x700a27>
 132:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7004a0>
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x5e>

0000013e <__vector_7>:
	                    | 1 << TCA_SINGLE_ENABLE_bp; /* Module Enable: enabled */
}


ISR(TCA0_OVF_vect){
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	
	//TCA0.SINGLE.INTFLAGS = (1<<OVF) | (1<<4); //clearing the interrupt flag
	
	static int num;
	TCA0.SINGLE.CMP0 = lookUp1[num];
 154:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <__data_end>
 158:	90 91 0d 28 	lds	r25, 0x280D	; 0x80280d <__data_end+0x1>
 15c:	fc 01       	movw	r30, r24
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	f8 4d       	sbci	r31, 0xD8	; 216
 166:	20 81       	ld	r18, Z
 168:	31 81       	ldd	r19, Z+1	; 0x01
 16a:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 16e:	30 93 29 0a 	sts	0x0A29, r19	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
	TCA0.SINGLE.CNT = 0;
 172:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
 176:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
	if(++num >= 6){ // Pre-increment num then check it's below 10.
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	86 30       	cpi	r24, 0x06	; 6
 17e:	91 05       	cpc	r25, r1
 180:	7c f0       	brlt	.+30     	; 0x1a0 <__vector_7+0x62>
		num = 0;       // Reset num.
 182:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <__data_end>
 186:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <__data_end+0x1>
	//IntCount++;
	
	

	
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti
	//TCA0.SINGLE.INTFLAGS = (1<<OVF) | (1<<4); //clearing the interrupt flag
	
	static int num;
	TCA0.SINGLE.CMP0 = lookUp1[num];
	TCA0.SINGLE.CNT = 0;
	if(++num >= 6){ // Pre-increment num then check it's below 10.
 1a0:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <__data_end>
 1a4:	90 93 0d 28 	sts	0x280D, r25	; 0x80280d <__data_end+0x1>
 1a8:	f0 cf       	rjmp	.-32     	; 0x18a <__vector_7+0x4c>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
