
PWM-testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000335e  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002452  00000000  00000000  000035d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  00005a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00005d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000185b  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  0000763b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00007684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_7>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  b0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <PWM_Init>:
    }
}

void PWM_Init(void){
	
	PORTD_DIR = 0XFF; //Set PORTD as output.
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x700460>
	
	
	TCA0.SINGLE.PER = 50;  //Dette definerer PWM-periodetiden.
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	86 a3       	std	Z+38, r24	; 0x26
  c8:	97 a3       	std	Z+39, r25	; 0x27
	//TCA0.SINGLE.CMP1 = 5;  //Dette definerer duty cycle ut på PD0
	
	TCA0.SINGLE.INTCTRL = (1<<OVF);  //Enables overflow interrupt in Timer 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	82 87       	std	Z+10, r24	; 0x0a
  ce:	08 95       	ret

000000d0 <ClkSelect>:
	
	
}

void ClkSelect(void){
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, 0); //Forces 20MHz CPU clock frequency
  d0:	88 ed       	ldi	r24, 0xD8	; 216
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	84 bf       	out	0x34, r24	; 52
  d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, (1<<7)); //Sender klokke-signal ut på PA7-pin
  da:	90 e8       	ldi	r25, 0x80	; 128
  dc:	84 bf       	out	0x34, r24	; 52
  de:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	PORTA_DIR |= (1<<7); //PA7 as output for clock frequency check
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	f4 e0       	ldi	r31, 0x04	; 4
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <Timer0_Init>:
	
}

void Timer0_Init(void){
	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm); //Enables PORTMUXD to achieve Waveform Output on the PWM Pins
  ee:	e0 ee       	ldi	r30, 0xE0	; 224
  f0:	f5 e0       	ldi	r31, 0x05	; 5
  f2:	84 81       	ldd	r24, Z+4	; 0x04
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	84 83       	std	Z+4, r24	; 0x04
	
	
	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	fa e0       	ldi	r31, 0x0A	; 10
  fc:	83 e7       	ldi	r24, 0x73	; 115
  fe:	81 83       	std	Z+1, r24	; 0x01
	                    | 1 << TCA_SINGLE_CMP0EN_bp         /* Setting: enabled */
	                    | 1 << TCA_SINGLE_CMP1EN_bp         /* Setting: enabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Setting: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */
						
	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Setting: enabled */
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	82 83       	std	Z+2, r24	; 0x02
						| 1 << TCA_SINGLE_CMP1OV_bp  /* Setting: enabled */
						| 0 << TCA_SINGLE_CMP2OV_bp; /* Setting: disabled */
	
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc    /* System Clock */
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <main>:



int main(void)
{
	sei();  //Global interrupts enabled
 10a:	78 94       	sei
	ClkSelect();
 10c:	0e 94 68 00 	call	0xd0	; 0xd0 <ClkSelect>
	Timer0_Init();
 110:	0e 94 77 00 	call	0xee	; 0xee <Timer0_Init>
	PWM_Init();   
 114:	0e 94 5c 00 	call	0xb8	; 0xb8 <PWM_Init>
	
	PORTF_DIR = PIN5_bm;
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7004a0>
	
	TCA0.SINGLE.CMP0 = 10;  //Dette definerer duty cycle ut på PD0
 11e:	8a e0       	ldi	r24, 0x0A	; 10
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 126:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x20>

0000012c <__vector_7>:
						//TCA0.SINGLE.PERBUF = 50;

}


ISR(TCA0_OVF_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	
	if (TCA0.SINGLE.CMP0 == 10) {  //Dette definerer duty cycle ut på PD0
 13a:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 13e:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
 142:	0a 97       	sbiw	r24, 0x0a	; 10
 144:	39 f4       	brne	.+14     	; 0x154 <__vector_7+0x28>
		
		TCA0.SINGLE.CMP0 = 25;
 146:	89 e1       	ldi	r24, 0x19	; 25
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 14e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
 152:	06 c0       	rjmp	.+12     	; 0x160 <__vector_7+0x34>
	
	}
			
	else  {//Dette definerer duty cycle ut på PD0
		
		TCA0.SINGLE.CMP0 = 10;
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x700a28>
 15c:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x700a29>
		}
		
		
		
			
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
